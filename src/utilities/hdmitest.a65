; HDMI I2C setup / test program

; Include C64 BASIC program load header

	 .word $0801
	 .org $0801

	; $D60E bit 7 = DDR SDA
	; $D60E bit 6 = DDR SCL
	; $D60D bit 7 = SDA
	; $D60D bit 6 = SCL
	 .alias data_bit  64
	 .alias clock_bit 128

	 .scope
	 .word _next, 10                       ; Next line and current line number
	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
_next:	 .word 0

iter1:	 .byte 0

	 .checkpc 2079
	 .advance 2079

programentrypoint:

	; disable interrupts so we can single-step more easily
	sei
	
	; Enable C65GS io
	lda #$47
	sta $d02f
	lda #$53
	sta $D02f

	; 50MHz CPU
	lda #65
	sta 0

	; clear screen, lower case
	lda #$93
	jsr $ffd2
	lda #$0e
	jsr $ffd2

	jmp finite

	lda $d60e
	and #$bf
	ora #$40
	sta $d60e
@infinity:
	inc $0400
	lda $d60d
	eor #$40
	sta $d60d
	jmp @infinity

finite:

	jsr i2cstop

	; Enable replacing SPD memory
	lda #$70
	ldy #$1f
	ldx #$80
	jsr writeregister

	; Set HDMI Source Product Description string to "M.E.G.A. 65 Computer"
	ldy #$00
@spd_next_char:
	lda spd_string,y
	tax
	phy
	lda #$70 ; I2C address for packet memory
	jsr writeregister
	ply
	iny
	cpy #$20
	bne @spd_next_char

	; Initialise various registers according to the documentation.
	ldx #$00
@setup_next_reg:
	lda hdmi_register_setup_table,x
	cmp #$FF
	beq  @done_setup
	tay
	inx
	lda hdmi_register_setup_table,x
	inx
	phx
	tax
	lda #$7A
	jsr writeregister
	plx
	jmp @setup_next_reg

@done_setup:

	; Dump values of all registers
	
	lda #$00
	sta regnum

nextaddr:
	; Read out registers of device $70 = packet memory map
	; $7A = normal registers (change by setting normal register $45)
	; $7E = EDID ( change by setting normal register $43)
	lda #$7a
	ldy regnum
	jsr readregister
	pha
	lda regnum
	and #$0f
	bne @printcomma
	lda #$0d
	jmp @printnewline
@printcomma:
	lda #$2c
@printnewline:
	jsr $ffd2
	plx
	lda #$00
	tay
	jsr $bdcd

	lda txackresult
	cmp #$70
	beq readok

	; indicate error reading I2C bus?

readok:
	inc regnum
	lda regnum
	bne nextaddr

endloop:
	inc $d020
	jmp endloop

regnum: .byte 0

spd_string:
	; See: https://ez.analog.com/video/f/q-a/9162/adv7511-source-product-description-infoframe-spd
	.byte $83 ; Type 3
	.byte $01 ; No idea why this value here
	.byte 25  ; Length of frame???
	.byte "@M.E.G.A.",0
	.byte "MEGA65 Computer",0
	.byte 0,0,0,0,0,0,0,0,0,0,0 ; Make sure we have at least 32 bytes, the 32nd of which must be $00

hdmi_register_setup_table:
	; Table of registers and values to setup
	; Taken from Section 3 - Quick Setup Guide for the 7511 HDMI transceiver

	; Power up the TX
	.byte $41,$00 ; power up (section 4.8)

	; Fixed register that must be set on power up
	.byte $98,$03 ; (section 4.2.9)
	.byte $9A,$E0 ; (section 4.2.9)
	.byte $9c,$30 ; (section 4.2.9)
	.byte $9d,$01 ; (section 4.2.9) (but what about bits 2 - 7 ?)
	.byte $A2,$A4 ; (section 4.2.9)
	.byte $A3,$A4 ; (section 4.2.9)
	.byte $E0,$D0 ; (section 4.2.9)
	.byte $F9,$00 ; (section 4.2.9)

	; Setup the video input mode
	; Register maps are around page 157 of the 7511 programming guide
	.byte $15,$00 ; (section 4.3.2) Video input mode in bits 0 - 3 : mode 0 = Non-DDR RGB, 8 - 12 bits per colour channel, separate syncs
	      	      ; Bits 4 - 7 = audio sample rate: 0b0000 = 44.1KHz audio. 0b1110 = 192KHz, 0b1010 = 96KHz, 0b010 = 48KHz, 0b0011 = 32KHz
		
	.byte $16,$00 ; (sections 4.3.2 and 4.3.5) Video input and output information
	      	      ; bits 5 - 4 = input colour depth: 11 = 8 bits per channel
		      ; bits 3 - 2 = input video style: 
		      ; bits 7 - 6 = output style: 0b00 = 4:4:4
		      ; bit 1 = ddr input edge (not used as we are not using DDR)
		      ; bit 0 = RGB/YCbCr select: 0 = RGB

	; 4:3 aspect ratio, positive sync polarities
	.byte $17,$00   ; Aspect ratio etc
	      		; bit 7 must be clear
			; bit 6 = VSYNC polarity
			; bit 5 = HSYNC polarity
			; bits 4 - 3 must be clear
			; bit 2 = 4:2:2 to 4:4:4 interpolation. 0 = use zero order interpolation ,1 = use first order interpolation
			; bit 1 = aspect ratio. 0 = 4:3, 1 = 16:9
			; bit 0 = enable DE generator (see registers $35 - $3A). Probably should be 0?

	.byte $18,$00	; Disable colour space conversion
	.byte $AF,$02  	; bit 1 : Manual HDMI/DVI select (1 = HDMI, required for audio?)
	      		; bit 7 = Enable HDCP (1 = enable. so set to 0 for no DRM)
	.byte $40,$80  ; bit 7 = Enable GC (General Control?)
	      	       ; bit 6 = Source Product Description, allows sending a name of the video source for display on the
		       ; receiver.  If we set this up correctly, we can have it display "M.E.G.A. 65 Computer" or similar
	      	       ; other bits enable various other packets. Leave others disabled.
	.byte $4C,$00  ; Output colour depth and general control colour depth
	.byte $97,$40  ; Set BKSV interrupt flag (but bit 6 must be set, before writing 1 to bit 6  according to page 15 ???)

	; End of list
	.byte $FF,$FF

; Write a register on the I2C bus
	; A = I2C address of device
	; Y = register number to write
	; X = value to write

writeregister:
	phx
	pha
	jsr i2cstart
	; Send I2C address with read bit clear 
	pla
	and #$fe  ; clear read bit
	jsr i2ctxbyte
	; Send register number
	tya
	jsr i2ctxbyte
	pla
	jsr i2ctxbyte
	rts	

; Read a register on the I2C bus
	; A = I2C address of device
	; Y = register number to read

readregister:
	pha
	jsr i2cstart
	; Send I2C address with read bit clear 
	pla
	pha
	and #$fe  ; clear read bit
	jsr i2ctxbyte
	; Send register number
	tya
	jsr i2ctxbyte

	; Send repeated start
	jsr i2cidlebus
	jsr i2cstart
	; Send I2C address with read bit set
	pla
	ora #$01      ; set read bit
	jsr i2ctxbyte
	; Read result
	jsr i2crxbyte
	pha
	jsr i2cstop
	pla
	rts

; Receive a byte on the I2C bus
;   Y = (N)ACK bit to send
i2crxbyte:

;	lda #$72
;	jsr $ffd2

	jsr sdahigh
	ldx #$00

	; Read byte
	lda #$00
	pha

rxbit:
	; Rotate result left one bit
	pla
	asl
	pha
	
	jsr delay10usec
	jsr sclhigh

clockstretchwait:
	; Wait for clock stretching
	jsr sclread
	cmp #$00
	beq clockstretchwait

	jsr delay10usec

	jsr sdaread

	cmp #$00
	beq rx0
	pla
	ora #$01
	pha
rx0:
	jsr scllow

	inx 
	cpx #$08
	bne rxbit

	; have byte, so now send (N)ACK bit
	cpy #$00
	bne rxack1
rxack0:	jsr sdalow
	jmp rxackclk
rxack1:	jsr sdahigh
rxackclk:
	jsr sclhigh
	jsr delay10usec
	jsr scllow
	jsr sdahigh

	; return result byte
	pla
	rts

; Wait for I2C bus to go idle
	
i2cidlebus:

	; get bus back to idle position after TXing byte
	jsr sdahigh
waitforsdatofloat:
	jsr sdaread
	cmp #$00
	beq waitforsdatofloat
	jsr sclhigh

	rts

; Send a byte on the I2C bus

i2ctxbyte:
	pha
	jsr delay10usec
	ldx #$08
txnextbit:
	pla
	pha
	and #$80
	bmi tx1
tx0:	
	jsr sdalow
	jmp txbitsent
tx1:	
	jsr sdahigh
txbitsent:
	jsr sclhigh
	jsr delay10usec
	jsr scllow
	jsr delay10usec
	pla
	asl
	pha
	dex
	bne txnextbit

	pla

	; sent the byte, now receive the ACK bit
	jsr sclhigh
	jsr delay10usec
	jsr sdaread	
	pha
	jsr scllow

	pla
	pha
	ora #$70
	sta txackresult

;	jsr $ffd2
;	lda #$0d
;	jsr $ffd2
	pla

	rts

txackresult:	.byte 0

delay10usec:
	; 50MHz = 20ns cycles.
	; 10usec = 500 CPU cycles
	; This loop should be more than sufficient
	phx
	ldx #$00
d1:	inx
	bne d1
	plx
	
;	lda #$2d
;	jsr $ffd2

	rts

i2cstart:

;	lda #$28
;	jsr $ffd2

	jsr sdalow
	jsr delay10usec
	jsr scllow
	jsr delay10usec
	rts

i2cstop:
	jsr sclhigh
	jsr delay10usec
	jsr sdahigh
	jsr delay10usec

;	lda #$29
;	jsr $ffd2

	rts

sclhigh:
	lda #clock_bit
	trb $d60E
	tsb $d60d

;	lda #$63
;	jsr $ffd2

	rts
scllow:
	lda #clock_bit
	tsb $d60e
	trb $d60d

;	lda #$43
;	jsr $ffd2

	rts

sclread:
	lda #clock_bit
	trb $d60e
	tsb $d60d
	lda $d60d
	and #clock_bit
	beq sclread0
	lda #$01
sclread0:
	rts


sdahigh:
	lda #data_bit
	trb $d60e
	tsb $d60d

;	lda #$64
;	jsr $ffd2
	rts
sdalow:
	lda #data_bit
	tsb $d60e
	trb $d60d

;	lda #$44
;	jsr $ffd2
	rts

sdaread:
	lda #data_bit
	trb $d60e
	tsb $d60d
	lda $d60d
	and #data_bit
	beq sdaread0
	lda #$01
sdaread0:
;	pha
;	ora #$30
;	jsr $ffd2
;	pla 
	rts
	

	.scend

	.outfile "hdmitest.prg"
